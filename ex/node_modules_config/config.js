const StyleDictionary = require('style-dictionary');
const tokens = require('./tokens');
const buildPath = './ex/node_modules_config/build/';


StyleDictionary.registerTransform({
  name: 'myRegisteredTransform',
  type: 'value',
  matcher: (token) => token.attributes.category === 'size',
  transformer: (token) => `${parseInt(token.value) * 16}px`
});

StyleDictionary.registerFormat({
  name: 'myRegisteredFormat',
  formatter: ({ dictionary }) => {
    return dictionary.allTokens.map((token) => token.value).join('\n');
  }
})

module.exports = {
  source: ['./ex/node_modules_config/tokens/index.js', './ex/node_modules_config/components/index.js'],
  transform: {
    myTransform: {
      type: 'name',
      transformer: (token) => token.path.join('_').toUpperCase()
    }
  },


  format: {
    myFormat: ({dictionary}) => {
      return dictionary.allTokens.map(token => `${token.name}: ${token.value}`).join('\n');
    }
  },
  platforms: {
    custom: {
      transforms: ['attribute/cti', 'myTransform', 'myRegisteredTransform', 'color/hex'],
      buildPath: buildPath,
      files: [{
        destination: 'variables.yml',
        format: 'myFormat'
      }]
    },
    css: {
      transformGroup: 'css',
      buildPath: buildPath,
      files: [{
        destination: 'variables.css',
        format: 'css/variables'
      }]
    },

    scss: {
      // This works, we can create new transform arrays on the fly and edit built-ins
      transforms: StyleDictionary.transformGroup.scss.concat('color/rgb'),
      buildPath: buildPath,
      files: [{
        destination: 'variables.scss',
        format: 'scss/variables'
      }]
    },

    js: {
      transforms: StyleDictionary.transformGroup.js.concat('myRegisteredTransform'),
      buildPath: buildPath,
      files: Object.keys(tokens.color).map((colorType) => ({
        destination: `${colorType}.js`,
        format: 'javascript/es6',
        filter: (token) => token.attributes.type === colorType
      }))
    },

    // You can still use built-in transformGroups and formats like before
    json: {
      transformGroup: 'js',
      buildPath: buildPath,
      files: [{
        destination: 'tokens.json',
        format: 'json'
      }]
    }
  }
}
